Triangle Problem :
Given a triangle array, return the minimum path sum from top to bottom.

For each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row

class Solution {
public:
    int solve(int i,int j,vector<vector<int>>&triangle,vector<vector<int>>&dp)
    {
        //Base Case
        if(i>=triangle.size() || j>=triangle[i].size())
        return 0;

        //Saved Data 
        if(dp[i][j]!=-1)return dp[i][j];

        //Logic
        int op1=triangle[i][j] + solve(i+1,j,triangle,dp);
        int op2=triangle[i][j] + solve(i+1,j+1,triangle,dp);
        
        return dp[i][j]=min(op1,op2);
     }
    int minimumTotal(vector<vector<int>>& triangle) {
         int n =triangle.size();
         vector<vector<int>>dp(n,vector<int>(n,-1));
         return solve(0,0,triangle,dp);

    }
};
