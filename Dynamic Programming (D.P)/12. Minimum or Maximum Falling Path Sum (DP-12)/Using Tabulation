class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int result = INT_MAX, n = matrix.size();
        vector<vector<int>> memo(n, vector<int>(n, INT_MAX));

        for (int col = 0; col < n; col++) {
            result = min(result, dp(matrix, 0, col, memo)); 
        }

        return result;
    }

private:
    int dp(vector<vector<int>>& matrix, int row, int col, vector<vector<int>>& memo) {
        if (col < 0 || col >= matrix.size()) return INT_MAX;
        if (row == matrix.size()-1) return matrix[row][col];
        if (memo[row][col] != INT_MAX) return memo[row][col];
        
        int down = dp(matrix, row + 1, col, memo);
        int downL = dp(matrix, row + 1, col - 1, memo);
        int downR = dp(matrix, row + 1, col + 1, memo);

        return memo[row][col] = matrix[row][col] + min({down, downL, downR});
    }
};
