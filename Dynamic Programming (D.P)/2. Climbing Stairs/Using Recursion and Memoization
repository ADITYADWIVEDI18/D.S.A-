Problem Statement:
Given a number of stairs. 
Starting from the 0th stair we need to climb to the “Nth” stair. At a time we can climb either one or two steps.
We need to return the total number of distinct ways to reach from 0th to Nth stair.

// Using Recursion :
int climbStairs(int n) {
        if (n == 0 || n == 1) {
            return 1;
        }
        return climbStairs(n-1) + climbStairs(n-2);
    }

// Using Memoization

int climbStairs(int n, unordered_map<int, int>& memo) {
        if (n == 0 || n == 1) {
            return 1;
        }
        if (memo.find(n) == memo.end()) {
            memo[n] = climbStairs(n-1, memo) + climbStairs(n-2, memo);
        }
        return memo[n];
    }

    int climbStairs(int n) {
        unordered_map<int, int> memo;
        return climbStairs(n, memo);
    }

or 

int solve(int n,vector<int>&dp){
        if(n<0)return 0;
        if(n==0)return 1;

        if(dp[n]!=-1)return dp[n];

        dp[n]= solve(n-1,dp) + solve(n-2,dp);
        
        return dp[n];
    }
    int climbStairs(int n) {
        vector<int>dp(n+1,-1);
        return solve(n,dp);
    }
