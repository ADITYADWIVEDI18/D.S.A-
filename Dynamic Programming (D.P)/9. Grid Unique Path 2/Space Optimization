63. Unique Paths II
Solved
Medium
Topics
Companies
Hint
You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.

An obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot include any square that is an obstacle.

Return the number of possible unique paths that the robot can take to reach the bottom-right corner.

The testcases are generated so that the answer will be less than or equal to 2 * 109.

LeetCode

class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int r = obstacleGrid.size();
        int c = obstacleGrid[0].size();

        vector<int> prev(c, 0);
        for (int i = 0; i < r; i++) {
            vector<int> curr(c, 0);
            for (int j = 0; j < c; j++) {
                if(obstacleGrid[i][j]==1)
                {curr[j]=0;}
                else if (i == 0 && j == 0) 
                {
                    curr[j] = 1;
                } 
                else {
                        int down = 0;
                        int right = 0;
                        if (i > 0) down = prev[j];
                        if (j > 0) right = curr[j - 1];
                        curr[j] = down + right;
                    
                }
            }
            prev = curr;
        }
        return prev[c - 1];
    }
};
