// Using DFS algorithm
class Solution {
public:
    void dfs(unordered_map<int,bool>&visit,int src,vector<vector<int>>& isConnected)
    {   
        visit[src]=true;
        int n1=isConnected[src].size();

        for(int i=0;i<n1;i++)
        {
            if(i!=src && isConnected[src][i]==1 && !visit[i])
            {
                dfs(visit,i,isConnected);
            }
        }
    }

    int findCircleNum(vector<vector<int>>& isConnected) {
        //Store the different vertices in the graph given
        int n=isConnected.size();
        //Initialise a visit for checking it visited prior or not
        unordered_map<int,bool>visit;   
        //Initialise this variable to count the different provinces
        int count=0;

        for(int i=0;i<n;i++)
        {
            if(!visit[i])
            {
                dfs(visit,i,isConnected);
                count++;
            }
        }

        return count;
}

// Using BFS algorithm 

#include <vector>
#include <queue>
#include <unordered_map>

using namespace std;

class Solution {
public:
    void bfs(unordered_map<int,bool>& visit, int src, vector<vector<int>>& isConnected) {
        queue<int> q;
        q.push(src);
        visit[src] = true;

        while (!q.empty()) {
            int node = q.front();
            q.pop();

            for (int i = 0; i < isConnected[node].size(); i++) {
                if (i != node && isConnected[node][i] == 1 && !visit[i]) {
                    q.push(i);
                    visit[i] = true;
                }
            }
        }
    }

    int findCircleNum(vector<vector<int>>& isConnected) {
        int n = isConnected.size();
        unordered_map<int, bool> visit;
        int count = 0;

        for (int i = 0; i < n; i++) {
            if (!visit[i]) {
                bfs(visit, i, isConnected);
                count++;
            }
        }

        return count;
    }
};



    }
};
