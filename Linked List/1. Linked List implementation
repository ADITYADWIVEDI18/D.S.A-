#include <iostream>
using namespace std;

class Node{
 public:
    int data;
    Node *next;

  Node(){
    data =0;
    next = NULL;
  }

  Node(int data){
    this->data = data;
    this->next = NULL;
  }
}

class Linkedlist {
 node *head = NULL;
 public:
  Linkedlist(){head = NULL;}
  void insertNode(int);
  void deleteNode(int);
  void printList();

};

void LinkedList::insertNode(int data){
  Node *newNode = new Node(data);
  if(head==NULL){
     head=newNode;
    return;
  }
  Node *temp = head;
  while(temp!=NULL){
    temp=temp->next;
  }
  temp= newNode;
  
}

void Linkedlist::deleteNode(int nodeoffset){

  node *temp1=head,*temp2=NULL;
  int Listlen=0;
  if(head==NULL){
    cout<<"List is empty"<<endl;
  }
  
  while(temp1!=NULL){
    temp1=temp1->next;
    Listlen++;
  }

  if(Listlen<nodeoffset){
    cout<<"Index out of range"<<endl;
  }

  temp1=head;
  while(nodeoffset-- > 1){

      temp2=temp1;
      temp1=temp1->next;
  }
  temp2->next= temp1->next;
  delete temp1;
  
}

void Linkedlist::printList(){
  Node *temp = head;
  if(head==NULL){
    cout<<"List is empty"<<endl;
  }
  while(temp!=Null){
    cout<<temp->data<<" ";
    temp1=temp1->next; }
}

int main() 
{ 
    Linkedlist list; 
  
    // Inserting nodes 
    list.insertNode(1); 
    list.insertNode(2); 
    list.insertNode(3); 
    list.insertNode(4); 
  
    cout << "Elements of the list are: "; 
  
    // Print the list 
    list.printList(); 
    cout << endl; 
  
    // Delete node at position 2. 
    list.deleteNode(2); 
  
    cout << "Elements of the list are: "; 
    list.printList(); 
    cout << endl; 
    return 0; 
}
 
}
